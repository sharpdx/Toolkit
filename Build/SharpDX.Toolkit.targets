<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  
  <!--Add ToolkitFxc as a new Build Action accessible on each File Properties-->
  <ItemGroup>
    <AvailableItemName Include="ToolkitFxc"/>
    <AvailableItemName Include="ToolkitFont"/>
    <AvailableItemName Include="ToolkitModel"/>
    <!-- Currently, toolkit texture is mostly a passthrough and copies the texture to the output directory -->
    <!--But a future version may provide compression/rescale on the fly, so we need to introduce it now -->
    <!--in order to keep project compatible-->
    <AvailableItemName Include="ToolkitTexture"/>
    <AvailableItemName Include="ToolkitAudio"/>
  </ItemGroup>

  <!--
    From C:\Program Files (x86)\MSBuild\Microsoft\XNA Game Studio\v4.0\Microsoft.Xna.GameStudio.Common.targets
    In VS 2008, a new feature was introduced to speed up the "F5" scenario when
    no changes have occurred. It does this by skipping the build entirely if the
    IDE believes there are no changes. This is fast, but unreliable because it
    does not check all the same files as msbuild does. In XNA game projects, for
    example, the IDE does not check if any content needs to be rebuilt. As a
    result, F5 is way faster, but you may start debugging a project that is out
    of date. To disable the new feature, we set DisableFastUpToDateCheck to true.
  -->
  <!--<PropertyGroup>
    <DisableFastUpToDateCheck>true</DisableFastUpToDateCheck>
  </PropertyGroup>-->

  <PropertyGroup>
    <SharpDXSdkToolsDir>../Source/Toolkit/SharpDX.Toolkit.CompilerTask/bin/Debug</SharpDXSdkToolsDir>
  </PropertyGroup>

  <UsingTask TaskName="SharpDX.Toolkit.EffectCompilerTask" AssemblyFile="$(SharpDXSdkToolsDir)\SharpDX.Toolkit.CompilerTask.dll"/>
  <UsingTask TaskName="SharpDX.Toolkit.FontCompilerTask" AssemblyFile="$(SharpDXSdkToolsDir)\SharpDX.Toolkit.CompilerTask.dll"/>
  <UsingTask TaskName="SharpDX.Toolkit.CompilerDependencyTask" AssemblyFile="$(SharpDXSdkToolsDir)\SharpDX.Toolkit.CompilerTask.dll"/>
  <UsingTask TaskName="SharpDX.Toolkit.ModelCompilerTask" AssemblyFile="$(SharpDXSdkToolsDir)\SharpDX.Toolkit.CompilerTask.dll"/>
  <UsingTask TaskName="SharpDX.Toolkit.TextureCompilerTask" AssemblyFile="$(SharpDXSdkToolsDir)\SharpDX.Toolkit.CompilerTask.dll"/>
  <UsingTask TaskName="SharpDX.Toolkit.AudioCompilerTask" AssemblyFile="$(SharpDXSdkToolsDir)\SharpDX.Toolkit.CompilerTask.dll"/>

  <!-- Plugs all dependency listing in AssignTargetPathsDependsOn - in order to support generated output to be copied as part of the build  -->
  <PropertyGroup>
    <BuildDependsOn>
      TkCompileTarget;
      $(BuildDependsOn);
    </BuildDependsOn>

    <AssignTargetPathsDependsOn>
      $(AssignTargetPathsDependsOn);
      TkListContentAndCompileTarget;
    </AssignTargetPathsDependsOn>

    <IsBuildInDebug>true</IsBuildInDebug>
    <IsBuildInDebug Condition="$(Optimize) == 'true'">false</IsBuildInDebug>

    <!--By default turn-on debugging on tkfxc when compiling in debug (no optimize)-->
    <ToolkitFxcDebugOption Condition="'$(ToolkitFxcDebugOption)' == ''">$(IsBuildInDebug)</ToolkitFxcDebugOption>

    <!--By default turn-on dynamic compiling on tkfxc when compiling in debug (no optimize)-->
    <ToolkitFxcDynamicCompilingOption Condition="'$(ToolkitFxcDynamicCompilingOption)' == ''">$(IsBuildInDebug)</ToolkitFxcDynamicCompilingOption>
  </PropertyGroup>

  <!-- Target used to calculate dependency output -->
  <Target Name="TkListContentAndCompileTarget">
    <Message Importance="high" Text="Run TkListContentAndCompileTarget @(ToolkitFxc)"/>

    <CompilerDependencyTask
        ProjectDirectory="$(ProjectDir)"
        IntermediateDirectory="$(IntermediateOutputPath)"
        Debug="$(ToolkitFxcDebugOption)"
        Files="@(ToolkitFxc);@(ToolkitFont);@(ToolkitModel);@(ToolkitTexture);@(ToolkitAudio)"
        RootNamespace="$(RootNamespace)"
        >
      <Output TaskParameter="ContentFiles" ItemName="TkContent"/>
      <Output TaskParameter="CompileFiles" ItemName="TkCompile"/>
    </CompilerDependencyTask>

    <ItemGroup>
      <!--List Of fxo compiled file-->
      <Content Include="@(TkContent)" KeepMetadata="Link;CopyToOutputDirectory"/>

      <!--List of cs compiled file-->
      <Compile Include="@(TkCompile)"/>
    </ItemGroup>
  </Target>

  <!-- Target used to compile content (Font/Fx files...) -->
  <Target Name="TkCompileTarget">
    <Message Importance="high" Text="Run TkCompileTarget @(ToolkitFxc)"/>
    
    <EffectCompilerTask
        ProjectDirectory="$(ProjectDir)"
        IntermediateDirectory="$(IntermediateOutputPath)"
        DynamicCompiling="$(ToolkitFxcDynamicCompilingOption)"
        Debug="$(ToolkitFxcDebugOption)"
        Files="@(ToolkitFxc)"
        RootNamespace="$(RootNamespace)"
        >
    </EffectCompilerTask>

    <!--TODO Merge both task into a single one?-->
    <FontCompilerTask
        ProjectDirectory="$(ProjectDir)"
        IntermediateDirectory="$(IntermediateOutputPath)"
        DynamicCompiling="$(ToolkitFxcDynamicCompilingOption)"
        Debug="$(ToolkitFxcDebugOption)"
        Files="@(ToolkitFont)"
        RootNamespace="$(RootNamespace)"
        >
    </FontCompilerTask>

    <!--TODO Merge both task into a single one?-->
    <ModelCompilerTask
        ProjectDirectory="$(ProjectDir)"
        IntermediateDirectory="$(IntermediateOutputPath)"
        DynamicCompiling="$(ToolkitFxcDynamicCompilingOption)"
        Debug="$(ToolkitFxcDebugOption)"
        Files="@(ToolkitModel)"
        RootNamespace="$(RootNamespace)"
        >
    </ModelCompilerTask>

    <!--TODO Merge both task into a single one?-->
    <TextureCompilerTask
        ProjectDirectory="$(ProjectDir)"
        IntermediateDirectory="$(IntermediateOutputPath)"
        DynamicCompiling="$(ToolkitFxcDynamicCompilingOption)"
        Debug="$(ToolkitFxcDebugOption)"
        Files="@(ToolkitTexture)"
        RootNamespace="$(RootNamespace)"
        >
    </TextureCompilerTask>

    <AudioCompilerTask
        ProjectDirectory="$(ProjectDir)"
        IntermediateDirectory="$(IntermediateOutputPath)"
        DynamicCompiling="$(ToolkitFxcDynamicCompilingOption)"
        Debug="$(ToolkitFxcDebugOption)"
        Files="@(ToolkitAudio)"
        RootNamespace="$(RootNamespace)"
        >
    </AudioCompilerTask>
  </Target>
</Project>